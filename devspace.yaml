version: v2beta1

vars:
  mimir_password_dir:
    command: echo $HOME/.devspace/edgefarn.monitor/mimir_password/
  monitoring_password:
    command: |-
      #!/bin/bash
      set -e
      echo $(cat ${mimir_password_dir}/password)
  monitoring_user:
    value: edgefarm-monitor

functions:
  init_mimir_password: |-
    # usage init_mimir_password <DIR>
    #!/usr/bin/env bash
    set -e
    set -u
    if [ "$#" -ne 1 ]; then
      echo "Illegal number of parameters"
      echo "mimir_password_psk"
      exit 1
    fi
    if ! [ -f "${1}/password" ]; then
      echo "generating password in ${1}"
      mkdir -p ${1}
      date +%s | sha256sum | base64 | head -c 32 > ${1}/password
    fi


commands:
  help: |-
    #!/bin/bash
    set -e
    GREEN='\033[0;32m'
    BRED='\033[3;31m'
    BGREEN='\033[1;32m'
    GREY='\033[0;36m'
    BOLD='\033[1m'
    NC='\033[0m' # No Color
    echo -e "${BGREEN}Usage of ${BRED}edgefarm.monitoring:${NC}"
    echo -e "${GREEN} General monitoring commands:${NC}"
    echo -e "${BOLD}  devspace run init                                 ${GREY}Create password for monitoring and store it locally${NC}"
    echo -e "${BOLD}  devspace run deploy-monitoring                    ${GREY}Creates full setup of monitoring${NC}"
    echo -e "${BOLD}  devspace run-pipeline purge-monitoring            ${GREY}Remove monitoring setup${NC}"

pipelines:
  init: |-
    # generating password for mimir
    init_mimir_password ${mimir_password_dir}

  deploy-agent: |-
    # install grafana agent
    create_deployments monitoring-secret-for-grafana-agent
    create_deployments grafana-agent
    create_deployments monitoring-resources-for-nats

  deploy-nats: |-
    # deploy nats
    create_deployments nats

  deploy-node-exporter: |-
    # deploy node exporter
    create_deployments node-exporter
    create_deployments service-monitor-for-node-exporter

  deploy-mimir-grafana: |-
    # install grafana and mimir
    create_deployments prometheus-crd
    create_deployments grafana
    create_deployments grafana-mimir

  deploy-monitoring: |-
    # install all monitoring setup
    run_pipelines deploy-mimir-grafana
    run_pipelines deploy-edge-applications
    run_pipelines deploy-logs

  deploy-logs: |-
    # install loging components
    create_deployments promtail
    helm install loki-loki-distributed --namespace loki ./dev/charts/loki-distributed --set loki.storageConfig.aws.s3=http://${monitoring_user}:${monitoring_password}@grafana-mimir-minio.monitoring.svc:9000 --set gateway.basicAuth.username=${monitoring_user} --set gateway.basicAuth.password=${monitoring_password}
    

  deploy-edge-applications: |-
    # install grafana-agent and node-exporter edge applicaitons
    create_deployments edgeapplication-node-exporter
    create_deployments edgeapplication-cadvisor
    create_deployments edgeapplication-grafana-agent

  purge-monitoring: |-
    purge_deployments edgeapplication-node-exporter edgeapplication-cadvisor edgeapplication-grafana-agent
    purge_deployments grafana-mimir grafana prometheus-crd
    purge_deployments promtail loki-loki-distributed
    helm uninstall loki-loki-distributed -n loki
    kubectl delete pvc -n monitoring --all
    kubectl delete pvc -n loki --all

deployments:
  kyverno-edge-monitoring-config:
    kubectl:
      manifests:
        - dev/manifests/kyverno/add_nodegroup_to_edge_monitoring.yaml
        - dev/manifests/kyverno/remove_nodegroup_from_edge_monitoring.yaml

  grafana-mimir:
    helm:
      chart:
        name: mimir-distributed
        repo: https://grafana.github.io/helm-charts
        version: "3.3.0"
      valuesFiles:
        - ./dev/charts/mimir/values.yaml
      values:
        nginx:
          basicAuth:
            username: ${monitoring_user}
            password: ${monitoring_password}
        minio:
          rootUser: ${monitoring_user}
          rootPassword: ${monitoring_password}
    namespace: monitoring

  grafana:
    helm:
      chart:
        name: grafana
        version: "6.44.0"
        repo: https://grafana.github.io/helm-charts
      valuesFiles:
        - ./dev/charts/grafana/values.yaml
      values:
        datasources:
          datasources.yaml:
            datasources:
              - name: mimir
                type: prometheus
                url: http://grafana-mimir-nginx.monitoring.svc:80/prometheus
                access: proxy
                basicAuth: true
                basicAuthUser: ${monitoring_user}
                withCredentials: true
                isDefault: true
                editable: true
                secureJsonData:
                  basicAuthPassword: ${monitoring_password}
              - name: Loki
                type: loki
                isDefault: false
                url: http://loki-loki-distributed-gateway.loki.svc
                editable: true
                basicAuth: true
                basicAuthUser: ${monitoring_user}
                withCredentials: true
                secureJsonData:
                  basicAuthPassword: ${monitoring_password}
    namespace: monitoring

  promtail:
    helm:
      chart:
        name: promtail
        repo: https://grafana.github.io/helm-charts
        version: "6.6.2"
      values:
        config:
          clients:
            - url: http://loki-loki-distributed-gateway.loki.svc/loki/api/v1/push
              basic_auth:
                username: ${monitoring_user}
                password: ${monitoring_password}
    namespace: loki

  edgeapplication-node-exporter:
    helm:
      chart:
        name: ./charts/node-exporter
    namespace: nodegroup

  edgeapplication-grafana-agent:
    helm:
      chart:
        name: ./charts/grafana-agent/
      values:
        configmap:
          agent_yaml:
            metrics:
              configs:
                edgenodes_exporter:
                  remote_write:
                    basic_auth:
                      username: ${monitoring_user}
                      password: ${monitoring_password}
            logs:
              configs:
                default:
                  clients:
                    basic_auth:
                      username: ${monitoring_user}
                      password: ${monitoring_password}
    namespace: nodegroup

  edgeapplication-cadvisor:
    helm:
      chart:
        name: ./charts/cadvisor/
    namespace: nodegroup

  prometheus-crd:
    kubectl:
      manifests:
        - https://raw.githubusercontent.com/grafana/agent/main/production/operator/crds/monitoring.coreos.com_podmonitors.yaml
        - https://raw.githubusercontent.com/grafana/agent/main/production/operator/crds/monitoring.coreos.com_probes.yaml
        - https://raw.githubusercontent.com/grafana/agent/main/production/operator/crds/monitoring.coreos.com_servicemonitors.yaml
        - https://raw.githubusercontent.com/grafana/agent/main/production/operator/crds/monitoring.grafana.com_grafanaagents.yaml
        - https://raw.githubusercontent.com/grafana/agent/main/production/operator/crds/monitoring.grafana.com_integrations.yaml
        - https://raw.githubusercontent.com/grafana/agent/main/production/operator/crds/monitoring.grafana.com_logsinstances.yaml
        - https://raw.githubusercontent.com/grafana/agent/main/production/operator/crds/monitoring.grafana.com_metricsinstances.yaml
        - https://raw.githubusercontent.com/grafana/agent/main/production/operator/crds/monitoring.grafana.com_podlogs.yaml
    namespace: monitoring

  nats:
    helm:
      chart:
        name: nats
        repo: https://nats-io.github.io/k8s/helm/charts/
      valuesFiles:
        - ./dev/charts/nats/values.yaml
    namespace: nats

  #old setup maybe we will need in future
  grafana-agent:
    helm:
      chart:
        name: grafana-agent-operator
        repo: https://grafana.github.io/helm-charts
      valuesFiles:
        - ./dev/charts/grafana-agent/values.yaml
    namespace: monitoring

  node-exporter:
    helm:
      chart:
        name: prometheus-node-exporter
        repo: https://prometheus-community.github.io/helm-charts
      valuesFiles:
        - ./dev/charts/node-exporter/values.yaml
    namespace: monitoring

  monitoring-secret-for-grafana-agent:
    kubectl:
      manifests:
        - ./dev/charts/grafana-agent/secret.yaml
    namespace: monitoring

  monitoring-resources-for-nats:
    kubectl:
      manifests:
        - ./dev/charts/grafana-agent/nats_metric_instance.yaml
        - ./dev/charts/grafana-agent/rbac_grafana_agent.yaml
        - ./dev/charts/grafana-agent/nats_grafana_agent.yaml
    namespace: monitoring

  service-monitor-for-node-exporter:
    kubectl:
      manifests:
        - ./dev/charts/node-exporter/service-monitor.yaml
    namespace: monitoring
