version: v2beta1
name: edgefarm-network

vars:
  monitoring_password_dir:
    command: echo $HOME/.devspace/edgefarn.monitor/monitoring_password/
  monitoring_password:
    command: |-
      #!/bin/bash
      set -e
      echo $(cat ${monitoring_password_dir}/password)
  monitoring_user:
    value: edgefarm-monitor

functions:
  init_monitoring_password: |-
    # usage init_monitoring_password <DIR>
    #!/usr/bin/env bash
    set -e
    set -u
    if [ "$#" -ne 1 ]; then
      echo "Illegal number of parameters"
      echo "monitoring_password_psk"
      exit 1
    fi
    if ! [ -f "${1}/password" ]; then
      echo "generating password in ${1}"
      mkdir -p ${1}
      date +%s | sha256sum | base64 | head -c 32 > ${1}/password
    fi

commands:
  help: |-
    #!/bin/bash
    set -e
    GREEN='\033[0;32m'
    BRED='\033[3;31m'
    BGREEN='\033[1;32m'
    GREY='\033[0;36m'
    BOLD='\033[1m'
    NC='\033[0m' # No Color
    echo -e "${BGREEN}Usage of ${BRED}edgefarm.monitoring:${NC}"
    echo -e "${GREEN} General monitoring commands:${NC}"
    echo -e "${BOLD}  devspace run-pipeline init                          # ${GREY}Create password for monitoring and store it locally${NC}"
    echo -e "${BOLD}  devspace run-pipeline deploy-core                   # ${GREY}Deploy all monitoring components to core cluster${NC}"
    echo -e "${BOLD}  devspace run-pipeline purge-core                    # ${GREY}Remove all monitoring components from core cluster${NC}"
    echo -e "${BOLD}  devspace run-pipeline deploy-backend                # ${GREY}Deploy all monitoring components to backend cluster${NC}"
    echo -e "${BOLD}  devspace run-pipeline purge-backend                 # ${GREY}Remove all monitoring components from backend cluster${NC}"
    echo -e "${GREEN} Sub-Targets for core cluster:${NC}"
    echo -e "${BOLD}  devspace run-pipeline deploy-grafana-agent          # ${GREY}Deploy grafana-agent to edge nodes${NC}"
    echo -e "${BOLD}  devspace run-pipeline purge-grafana-agent           # ${GREY}Remove grafana-agent from edge nodes${NC}"
    echo -e "${BOLD}  devspace run-pipeline deploy-node-exporter          # ${GREY}Deploy node exporter to edge nodes${NC}"
    echo -e "${BOLD}  devspace run-pipeline purge-node-exporter           # ${GREY}Remove node exporter from edge nodes${NC}"
    # echo -e "${BOLD}  devspace run-pipeline deploy-cadvisor               # ${GREY}Deploy cadvisor to edge nodes${NC}"
    # echo -e "${BOLD}  devspace run-pipeline purge-cadvisor                # ${GREY}Remove cadvisor to edge nodes${NC}"
    echo -e "${GREEN} Sub-Targets for backend cluster (metrics):${NC}"
    echo -e "${BOLD}  devspace run-pipeline deploy-prometheus-crd         # ${GREY}Deploy prometheus-crd to backend cluster${NC}"
    echo -e "${BOLD}  devspace run-pipeline purge-prometheus-crd          # ${GREY}Remove prometheus-crd from backend cluster${NC}"
    echo -e "${BOLD}  devspace run-pipeline deploy-grafana-mimir          # ${GREY}Deploy grafana-mimir to backend cluster${NC}"
    echo -e "${BOLD}  devspace run-pipeline purge-grafana-mimir           # ${GREY}Remove grafana-mimir from backend cluster${NC}"
    echo -e "${BOLD}  devspace run-pipeline deploy-grafana                # ${GREY}Deploy grafana to backend cluster${NC}"
    echo -e "${BOLD}  devspace run-pipeline purge-grafana                 # ${GREY}Remove grafana from backend cluster${NC}"
    # echo -e "${BOLD}  devspace run-pipeline deploy-grafana-agent-operator # ${GREY}Deploy grafana-agent-operator to backend cluster${NC}"
    # echo -e "${BOLD}  devspace run-pipeline purge-grafana-agent-operator  # ${GREY}Remove grafana-agent-operator from backend cluster${NC}"
    # echo -e "${BOLD}  devspace run-pipeline deploy-main-nats-monitoring   # ${GREY}Deploy main-nats-monitoring to backend cluster${NC}"
    # echo -e "${BOLD}  devspace run-pipeline purge-main-nats-monitoring    # ${GREY}Remove main-nats-monitoring from backend cluster${NC}"
    # echo -e "${GREEN} Sub-Targets for backend cluster (logs):${NC}"
    # echo -e "${BOLD}  devspace run-pipeline deploy-promtail               # ${GREY}Deploy promtail to backend cluster${NC}"
    # echo -e "${BOLD}  devspace run-pipeline purge-promtail                # ${GREY}Remove promtail from backend cluster${NC}"
    # echo -e "${BOLD}  devspace run-pipeline deploy-loki-distributed       # ${GREY}Deploy loki-distributed to backend cluster${NC}"
    # echo -e "${BOLD}  devspace run-pipeline purge-loki-distributed        # ${GREY}Remove loki-distributed from backend cluster${NC}"

pipelines:
  init: |-
    # generating password for monitoring
    init_monitoring_password ${monitoring_password_dir}

  deploy-core: |-
    # install edge grafana-agent, node-exporter and cadvisor
    run_pipelines deploy-grafana-agent
    run_pipelines deploy-node-exporter
    # run_pipelines deploy-cadvisor

  purge-core: |-
    run_pipelines purge-node-exporter
    run_pipelines purge-grafana-agent
    # run_pipelines purge-cadvisor

  deploy-cadvisor: |-
    create_deployments edge-cadvisor
  purge-cadvisor: |-
    purge_deployments edge-cadvisor

  deploy-grafana-agent: |-
    create_deployments edge-grafana-agent
  purge-grafana-agent: |-
    purge_deployments edge-grafana-agent

  deploy-node-exporter: |-
    create_deployments edge-node-exporter
  purge-node-exporter: |-
    purge_deployments edge-node-exporter

  deploy-backend: |-
    run_pipelines deploy-prometheus-crd
    run_pipelines deploy-grafana-mimir
    run_pipelines deploy-grafana
    # run_pipelines deploy-promtail
    # run_pipelines deploy-loki-distributed

  purge-backend: |-
    # run_pipelines purge-loki-distributed
    # run_pipelines purge-promtail
    run_pipelines purge-grafana-mimir
    run_pipelines purge-grafana
    run_pipelines purge-prometheus-crd

  deploy-prometheus-crd: |-
    create_deployments prometheus-crd

  purge-prometheus-crd: |-
    purge_deployments prometheus-crd

  deploy-grafana-mimir: |-
    create_deployments grafana-mimir

  purge-grafana-mimir: |-
    purge_deployments grafana-mimir

  deploy-grafana: |-
    create_deployments grafana
  purge-grafana: |-
    purge_deployments grafana

  deploy-grafana-agent-operator: |-
    create_deployments grafana-agent-operator

  purge-grafana-agent-operator: |-
    purge_deployments grafana-agent-operator

  deploy-main-nats-monitoring: |-
    create_deployments main-nats-monitoring

  purge-main-nats-monitoring: |-
    purge_deployments main-nats-monitoring

  deploy-loki-distributed: |-
    create_deployments loki-distributed

  purge-loki-distributed: |-
    purge_deployments loki-distributed

  deploy-promtail: |-
    create_deployments promtail
  purge-promtail: |-
    purge_deployments promtail

deployments:
  grafana-mimir:
    helm:
      chart:
        name: mimir-distributed
        repo: https://grafana.github.io/helm-charts
        version: "3.3.0"
      values:
        alertManager:
          storageClass: local-path
        ingester:
          storageClass: local-path
        store_gateway:
          storageClass: local-path
        compactor:
          storageClass: local-path
        nginx:
          basicAuth:
            enabled: false
            username: ${mimir_user}
            password: ${mimir_password}
            htpasswd: >-
              {{ htpasswd (required "'nginx.basicAuth.username' is required" .Values.nginx.basicAuth.username) (required "'nginx.basicAuth.password' is required" .Values.nginx.basicAuth.password) }}
        metaMonitoring:
          serviceMonitor:
            enabled: true
            namespace: monitoring
          grafanaAgent:
            metrics:
              enabled: true
              remote:
                url: "http://grafana-mimir-nginx.monitoring.svc:80/api/v1/push"
    namespace: monitoring

  grafana:
    helm:
      chart:
        name: grafana
        version: "6.44.0"
        repo: https://grafana.github.io/helm-charts
      valuesFiles:
        - ./dev/charts/grafana/values.yaml
      values:
        datasources:
          datasources.yaml:
            datasources:
              - name: mimir
                type: prometheus
                url: http://grafana-mimir-nginx.monitoring.svc:80/prometheus
                access: proxy
                basicAuth: true
                basicAuthUser: ${mimir_user}
                withCredentials: true
                isDefault: true
                editable: true
                secureJsonData:
                  basicAuthPassword: ${mimir_password}
              # - name: Loki
              #   type: loki
              #   isDefault: false
              #   url: http://loki-distributed-gateway.loki.svc
              #   editable: true
              #   basicAuth: true
              #   basicAuthUser: ${monitoring_user}
              #   withCredentials: true
              #   secureJsonData:
              #     basicAuthPassword: ${monitoring_password}
    namespace: monitoring

  edge-node-exporter:
    helm:
      chart:
        name: ./charts/node-exporter
    namespace: edge-monitoring

  edge-grafana-agent:
    helm:
      chart:
        name: ./charts/grafana-agent/
      values:
        configmap:
          agent_yaml:
            metrics:
              configs:
                edgenodes_exporter:
                  remote_write:
                    basic_auth:
                      username: ${monitoring_user}
                      password: ${monitoring_password}
            logs:
              configs:
                default:
                  clients:
                    basic_auth:
                      username: ${monitoring_user}
                      password: ${monitoring_password}
    namespace: edge-monitoring

  edge-cadvisor:
    helm:
      chart:
        name: ./charts/cadvisor/
    namespace: edge-monitoring

  # promtail:
  #   helm:
  #     chart:
  #       name: promtail
  #       repo: https://grafana.github.io/helm-charts
  #       version: "6.6.2"
  #     values:
  #       config:
  #         clients:
  #           - url: http://loki-distributed-gateway.loki.svc/loki/api/v1/push
  #             basic_auth:
  #               username: ${monitoring_user}
  #               password: ${monitoring_password}
  #   namespace: loki

  # loki-distributed:
  #   helm:
  #     chart:
  #       name: loki-distributed
  #       path: ./dev/charts/loki-distributed
  #     values:
  #       loki:
  #         storageConfig:
  #           aws:
  #             s3: http://${monitoring_user}:${monitoring_password}@grafana-mimir-minio.monitoring.svc:9000
  #       gateway:
  #         basicAuth:
  #           username: ${monitoring_user}
  #           password: ${monitoring_password}
  #   namespace: loki

  prometheus-crd:
    kubectl:
      manifests:
        - https://raw.githubusercontent.com/grafana/agent/main/production/operator/crds/monitoring.coreos.com_podmonitors.yaml
        - https://raw.githubusercontent.com/grafana/agent/main/production/operator/crds/monitoring.coreos.com_probes.yaml
        - https://raw.githubusercontent.com/grafana/agent/main/production/operator/crds/monitoring.coreos.com_servicemonitors.yaml
        - https://raw.githubusercontent.com/grafana/agent/main/production/operator/crds/monitoring.grafana.com_grafanaagents.yaml
        - https://raw.githubusercontent.com/grafana/agent/main/production/operator/crds/monitoring.grafana.com_integrations.yaml
        - https://raw.githubusercontent.com/grafana/agent/main/production/operator/crds/monitoring.grafana.com_logsinstances.yaml
        - https://raw.githubusercontent.com/grafana/agent/main/production/operator/crds/monitoring.grafana.com_metricsinstances.yaml
        - https://raw.githubusercontent.com/grafana/agent/main/production/operator/crds/monitoring.grafana.com_podlogs.yaml
    namespace: monitoring

  # grafana-agent-operator:
  #   helm:
  #     chart:
  #       name: grafana-agent-operator
  #       repo: https://grafana.github.io/helm-charts
  #       version: "0.2.8"
  #     values: {}
  #   namespace: monitoring

  # main-nats-monitoring:
  #   helm:
  #     chart:
  #       name: main-nats-monitoring
  #       path: ./charts/main-nats-monitoring
  #     values:
  #       mimir:
  #         user: ${monitoring_user}
  #         password: ${monitoring_password}
  #       agent:
  #         image: grafana/agent:v0.28.0
  #   namespace: monitoring

  # Old setup we will need in future. Don't delete it yet
  # node-exporter:
  #   helm:
  #     chart:
  #       name: prometheus-node-exporter
  #       repo: https://prometheus-community.github.io/helm-charts
  #     valuesFiles:
  #       - ./dev/charts/node-exporter/values.yaml
  #   namespace: monitoring

  # service-monitor-for-node-exporter:
  #   kubectl:
  #     manifests:
  #       - ./dev/charts/node-exporter/service-monitor.yaml
  #   namespace: monitoring
