apiVersion: apps.openyurt.io/v1alpha1
kind: YurtAppDaemon
metadata:
  name: node-exporter
  labels:
    app.kubernetes.io/name: prometheus-node-exporter
  namespace: {{ .Values.namespace | default .Release.Namespace }}
spec:
  selector:
    matchLabels:
{{- include "prometheus-node-exporter.selectorLabels" . | indent 6 }}
  workloadTemplate:
    deploymentTemplate:
      metadata:
        namespace: {{ .Values.namespace | default .Release.Namespace }}
        name: {{ template "prometheus-node-exporter.fullname" . }}
        labels: 
{{- include "prometheus-node-exporter.labels" . | indent 10 }}
        {{- with .Values.podAnnotations }}
        annotations:
        {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        replicas: 1
        selector:
          matchLabels:
{{- include "prometheus-node-exporter.selectorLabels" . | indent 12 }}
        {{- if .Values.updateStrategy }}
        strategy:
{{ toYaml .Values.updateStrategy | indent 10 }}
        {{- end }}
        template:
          metadata:
            labels: {{ include "prometheus-node-exporter.labels" . | indent 14 }}
            {{- if .Values.podAnnotations }}
            annotations:
            {{- toYaml .Values.podAnnotations | nindent 15 }}
            {{- end }}
          spec:
            automountServiceAccountToken: {{ .Values.serviceAccount.automountServiceAccountToken }}
            serviceAccountName: {{ template "prometheus-node-exporter.serviceAccountName" . }}
      {{- if .Values.securityContext }}
            securityContext:
{{ toYaml .Values.securityContext | indent 14 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
            priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
            {{- if .Values.extraInitContainers }}
            initContainers:
            {{ toYaml .Values.extraInitContainers | nindent 14 }}
            {{- end }}
            containers:
              - name: node-exporter
                image: {{ include "prometheus-node-exporter.image" . }}
                imagePullPolicy: {{ .Values.image.pullPolicy }}
                args:
                  - --web.listen-address=[$(HOST_IP)]:{{ .Values.service.port }}
            {{- if .Values.extraArgs }}
              {{- range $_, $arg := .Values.extraArgs }}
                  - {{ $arg }}
              {{- end }}
            {{- end }}
                {{- with .Values.containerSecurityContext }}
                securityContext: {{ toYaml . | nindent 20 }}
                {{- end }}
                env:
                - name: HOST_IP
                  {{- if .Values.service.listenOnAllInterfaces }}
                  value: 0.0.0.0
                  {{- else }}
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: status.hostIP
                  {{- end }}
                {{- range $key, $value := .Values.env }}
                - name: {{ $key }}
                  value: {{ $value | quote }}
                {{- end }}
                ports:
                  - name: {{ .Values.service.portName }}
                    containerPort: {{ .Values.service.port }}
                    protocol: TCP
                livenessProbe:
                  failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
                  httpGet:
                    httpHeaders:
                    {{- range $_, $header := .Values.livenessProbe.httpGet.httpHeaders }}
                    - name: {{ $header.name }}
                      value: {{ $header.value }}
                    {{- end }}
                    path: /
                    port: {{ .Values.service.port }}
                    scheme: {{ upper .Values.livenessProbe.httpGet.scheme }}
                  initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
                  periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
                  successThreshold: {{ .Values.livenessProbe.successThreshold }}
                  timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
                readinessProbe:
                  failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
                  httpGet:
                    httpHeaders:
                    {{- range $_, $header := .Values.readinessProbe.httpGet.httpHeaders }}
                    - name: {{ $header.name }}
                      value: {{ $header.value }}
                    {{- end }}
                    path: /
                    port: {{ .Values.service.port }}
                    scheme: {{ upper .Values.readinessProbe.httpGet.scheme }}
                  initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
                  periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
                  successThreshold: {{ .Values.readinessProbe.successThreshold }}
                  timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
                resources:
          {{- toYaml .Values.resources | nindent 18 }}
                volumeMounts:
                  {{- if .Values.extraHostVolumeMounts }}
                  {{- range $_, $mount := .Values.extraHostVolumeMounts }}
                  - name: {{ $mount.name }}
                    mountPath: {{ $mount.mountPath }}
                    readOnly: {{ $mount.readOnly }}
                  {{- if $mount.mountPropagation }}
                    mountPropagation: {{ $mount.mountPropagation }}
                  {{- end }}
                  {{- end }}
                  {{- end }}
                  {{- if .Values.sidecarVolumeMount }}
                  {{- range $_, $mount := .Values.sidecarVolumeMount }}
                  - name: {{ $mount.name }}
                    mountPath: {{ $mount.mountPath }}
                    readOnly: true
                  {{- end }}
                  {{- end }}
                  {{- if .Values.configmaps }}
                  {{- range $_, $mount := .Values.configmaps }}
                  - name: {{ $mount.name }}
                    mountPath: {{ $mount.mountPath }}
                  {{- end }}
                  {{- if .Values.secrets }}
                  {{- range $_, $mount := .Values.secrets }}
                  - name: {{ .name }}
                    mountPath: {{ .mountPath }}
                  {{- end }}
                  {{- end }}
                  {{- end }}
      {{- if .Values.sidecars }}
      {{ toYaml .Values.sidecars | indent 14 }}
                {{- if or .Values.sidecarVolumeMount .Values.sidecarHostVolumeMounts }}
                volumeMounts:
                  {{- range $_, $mount := .Values.sidecarVolumeMount }}
                  - name: {{ $mount.name }}
                    mountPath: {{ $mount.mountPath }}
                    readOnly: {{ $mount.readOnly }}
                  {{- end }}
                  {{- range $_, $mount := .Values.sidecarHostVolumeMounts }}
                  - name: {{ $mount.name }}
                    mountPath: {{ $mount.mountPath }}
                    readOnly: {{ $mount.readOnly }}
                  {{- if $mount.mountPropagation }}
                    mountPropagation: {{ $mount.mountPropagation }}
                  {{- end }}
                  {{- end }}
                {{- end }}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
            imagePullSecrets:
      {{ toYaml .Values.imagePullSecrets | indent 16 }}
            {{- end }}
            hostNetwork: {{ .Values.hostNetwork }}
            hostPID: {{ .Values.hostPID }}
      {{- if .Values.affinity }}
            affinity:
{{ toYaml .Values.affinity | indent 14 }}
      {{- end }}
      {{- with .Values.dnsConfig }}
            dnsConfig:
      {{ toYaml . | indent 16 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
            nodeSelector:
      {{ toYaml .Values.nodeSelector | indent 16 }}
      {{- end }}
          {{- with .Values.tolerations }}
            tolerations:
{{ toYaml . | indent 14 }}
          {{- end }}
            volumes:
              {{- if .Values.extraHostVolumeMounts }}
              {{- range $_, $mount := .Values.extraHostVolumeMounts }}
              - name: {{ $mount.name }}
                hostPath:
                  path: {{ $mount.hostPath }}
              {{- end }}
              {{- end }}
              {{- if .Values.sidecarVolumeMount }}
              {{- range $_, $mount := .Values.sidecarVolumeMount }}
              - name: {{ $mount.name }}
                emptyDir:
                  medium: Memory
              {{- end }}
              {{- end }}
              {{- if .Values.sidecarHostVolumeMounts }}
              {{- range $_, $mount := .Values.sidecarHostVolumeMounts }}
              - name: {{ $mount.name }}
                hostPath:
                  path: {{ $mount.hostPath }}
              {{- end }}
              {{- end }}
              {{- if .Values.configmaps }}
              {{- range $_, $mount := .Values.configmaps }}
              - name: {{ $mount.name }}
                configMap:
                  name: {{ $mount.name }}
              {{- end }}
              {{- end }}
              {{- if .Values.secrets }}
              {{- range $_, $mount := .Values.secrets }}
              - name: {{ $mount.name }}
                secret:
                  secretName: {{ $mount.name }}
              {{- end }}
              {{- end }}
  nodepoolSelector:
    matchLabels:
    {{- with .Values.nodepoolSelector }}
    {{- toYaml . | nindent 6 }}
    {{- end }}
---
