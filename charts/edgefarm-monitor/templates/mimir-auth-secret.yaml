{{- if .Values.config.mimir.auth.secret.create }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: create-htpasswd
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "edgefarm-monitor.labels" . | nindent 4 }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: create-htpasswd-role
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "edgefarm-monitor.labels" . | nindent 4 }}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: create-htpasswd-role-rolebinding
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "edgefarm-monitor.labels" . | nindent 4 }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: create-htpasswd-role
subjects:
- kind: ServiceAccount
  name: create-htpasswd
  namespace: {{ .Release.Namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: mimir-create-htpasswd-job-{{ randAlphaNum 5 | lower }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "edgefarm-monitor.labels" . | nindent 4 }}
spec:
  template:
    spec:
      serviceAccountName: create-htpasswd
      restartPolicy: OnFailure
      containers:
      - name: create-htpasswd
        image: bitnami/kubectl:1.22
        command: ["/bin/bash", "-c"]
        args:
        - |
          # Read user and password from secrets
          AGENT_USER=$(cat /etc/agent-secret/{{ .Values.config.grafanaAgent.secret.userKey }})
          AGENT_PASSWORD=$(cat /etc/agent-secret/{{ .Values.config.grafanaAgent.secret.passwordKey }})
          GRAFANA_USER=$(cat /etc/grafana-secret/mimir-datasource.yaml | grep "basicAuthUser:" | awk -F ':' '{print $2}' | sed -e 's/^ "//' -e 's/"$//')
          GRAFANA_PASSWORD=$(cat /etc/grafana-secret/mimir-datasource.yaml | grep "basicAuthPassword:" | awk -F ':' '{print $2}' | sed -e 's/^ "//' -e 's/"$//')

          # Create .htpasswd file
          printf "${AGENT_USER}:$(echo ${AGENT_PASSWORD} | openssl passwd -apr1 -stdin)\n" > /tmp/.htpasswd
          printf "${GRAFANA_USER}:$(echo ${GRAFANA_PASSWORD} | openssl passwd -apr1 -stdin)\n" >> /tmp/.htpasswd

          # Create or update the secret
          kubectl create secret generic {{ .Values.config.mimir.auth.secret.name }} --from-file=/tmp/.htpasswd --dry-run=client -o yaml | kubectl apply -f -
        volumeMounts:
        - name: agent-secret-volume
          mountPath: /etc/agent-secret
        - name: grafana-secret-volume
          mountPath: /etc/grafana-secret
      volumes:
      - name: agent-secret-volume
        secret:
          secretName: {{ .Values.config.grafanaAgent.secret.name }}
      - name: grafana-secret-volume
        secret:
          secretName: {{ .Values.config.grafana.dataSource.secret.name }}
{{- end }}